import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

plugins {
    id 'java'
    id 'edu.sc.seis.launch4j' version '2.4.6'
    id 'com.bmuschko.izpack' version '3.0'
}

group 'cz.muni.crocs.appletstore'
project.version = '1.3'
sourceCompatibility = 1.11
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        // distribution repository for izpack
        name "Ice Maven Release Repository"
        url "http://anonsvn.icesoft.org/repo/maven2/releases"
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'

    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

    compile group: 'com.github.martinpaljak', name: 'apdu4j-pcsc', version: '19.05.08'
    compile group: 'com.github.martinpaljak', name: 'apdu4j-core', version: '19.05.08'
    compile group: 'com.github.martinpaljak', name: 'globalplatformpro', version: '19.06.16'


    compile group: 'com.miglayout', name: 'miglayout', version: '3.7.4'
    compile group: 'org.ini4j', name: 'ini4j', version: '0.5.4'
    compile group: 'com.googlecode.concurrent-trees', name: 'concurrent-trees', version: '2.6.1'
    implementation 'edu.sc.seis.gradle:launch4j:2.4.6'
    izpack 'org.codehaus.izpack:izpack-dist:5.1.3'

    implementation 'io.github.g00fy2:versioncompare:1.4.1'

    // gradle javafx plugin addds the javafx as module path dependency, not classpath
    compile "org.openjfx:javafx-base:11:${platform}"
    compile "org.openjfx:javafx-graphics:11:${platform}"
    compile "org.openjfx:javafx-controls:11:${platform}"
    compile "org.openjfx:javafx-media:11:${platform}"
    compile "org.openjfx:javafx-swing:11:${platform}"
    compile "org.openjfx:javafx-web:11:${platform}"
}

///////////////////////////
//tasks meant to be executed
///////////////////////////

task windowsDeployment(type: Launch4jLibraryTask, dependsOn: izPackCreateInstaller) {
    outputDir="deploy-win"
    jar = "JCAppStore-${project.version}-win.jar"
    outfile = "JCAppStore-${project.version}-win.exe"

    headerType = "gui"
    manifest = "../../installer-win/launch4j/manifest.mf"
    icon="../../src/main/resources/img/icon.ico"
    copyConfigurable = []
}

task unixDeployment(dependsOn: jar) {
    //note if this task fails for you, just run the script manually (from the folder the script is in)
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        println "Unable to run on Windows."
        return 1
    }

    exec {
        commandLine "${projectDir}/installer-unix/targenerator.sh"
    }
}

///////////////////////////
// izpack installer
///////////////////////////

izpack {
    baseDir = file("$buildDir/deploy-win")
    installFile = file('installer-win/installer.xml')
    outputFile = file("$buildDir/deploy-win/JCAppStore-${project.version}-win.jar")
    compression = 'deflate'
    compressionLevel = 9
    appProperties = ['app.group': 'CRoCS', 'app.name': 'jcAppStore', 'app.title': 'JCAppStore',
                     'app.version': project.version, 'app.subpath': "JCAppStore-${project.version}"]
}
izPackCreateInstaller.dependsOn 'prepareIzPack'

task prepareIzPack(dependsOn: 'createAppExe') {
    //generate folders deploy, out, res, main
    doFirst {
        def folder = file("$buildDir/deploy-win/out/src/main/resources")
        if( !folder.exists() ) {
            folder.mkdirs()
        }

        def scripts = file("$buildDir/deploy-win/scripts")
        if( !scripts.exists() ) {
            scripts.mkdirs()
        }
    }

    doLast {
        copy {
            from "src/main/resources"
            into "$buildDir/deploy-win/out/src/main/resources"
        }

        copy {
            from "installer-win/dependency"
            into "$buildDir/deploy-win/scripts"
        }

        copy {
            from file("$buildDir/libs/JCAppStore-${project.version}.exe")
            into file("$buildDir/deploy-win/out")
        }
    }
}

///////////////////////////
//binary section
///////////////////////////

task createAppExe(type: Launch4jLibraryTask, dependsOn: jar) {
    outputDir="libs"
    jar = "JCAppStore-${project.version}.jar"
    outfile = "JCAppStore-${project.version}.exe"

    headerType = "gui"
    manifest = "../../installer-win/launch4j/manifest.mf"
    icon="../../src/main/resources/img/icon.ico"
    copyConfigurable = []
}


jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    //do not add certain resources, these are used from external folder instead for better accessibility
    //todo move images back to resources and load them from there (not visible from outside)
    //todo move lang properties OUTSIDE and make them updateable/modifiable
    processResources.exclude('css/**')
    processResources.exclude('data/**')
    processResources.exclude('fonts/**')
    processResources.exclude('host/**')
    processResources.exclude('img/**')

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Main-Class': 'cz.muni.crocs.appletstore.SplashScreen'
    }
}
